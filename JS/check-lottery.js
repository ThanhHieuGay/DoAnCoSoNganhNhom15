// prediction.js - JavaScript cho Trang D·ª± ƒêo√°n V√© S·ªë

// D·ªØ li·ªáu t·ªânh/th√†nh theo mi·ªÅn
const provinces = {
    nam: ['TP. H·ªì Ch√≠ Minh', 'ƒê·ªìng Nai', 'C·∫ßn Th∆°', 'An Giang', 'B√¨nh D∆∞∆°ng', 'V≈©ng T√†u', 'Ti·ªÅn Giang', 'B·∫øn Tre'],
    trung: ['ƒê√† N·∫µng', 'Hu·∫ø', 'Kh√°nh H√≤a', 'Ph√∫ Y√™n', 'Qu·∫£ng Nam', 'Qu·∫£ng Ng√£i', 'B√¨nh ƒê·ªãnh'],
    bac: ['H√† N·ªôi', 'H·∫£i Ph√≤ng', 'Qu·∫£ng Ninh', 'B·∫Øc Ninh', 'Th√°i B√¨nh', 'Nam ƒê·ªãnh']
};

let currentRegion = 'nam';
let predictionHistory = [];

// Kh·ªüi t·∫°o khi trang load
document.addEventListener('DOMContentLoaded', function() {
    initializePage();
    loadPredictionHistory();
    setupEventListeners();
});

// Kh·ªüi t·∫°o trang
function initializePage() {
    updateProvinceList();
    setDateRange();
    
    // Load l·ªãch s·ª≠ t·ª´ sessionStorage
    const saved = sessionStorage.getItem('predictionHistory');
    if (saved) {
        predictionHistory = JSON.parse(saved);
        displayHistory();
    }
}

// C·∫≠p nh·∫≠t danh s√°ch t·ªânh/th√†nh
function updateProvinceList() {
    const select = document.getElementById('prediction-province');
    select.innerHTML = '<option value="">-- Ch·ªçn t·ªânh/th√†nh --</option>';
    
    provinces[currentRegion].forEach(province => {
        const option = document.createElement('option');
        option.value = province;
        option.textContent = province;
        select.appendChild(option);
    });
}

// Thi·∫øt l·∫≠p gi·ªõi h·∫°n ng√†y (ch·ªâ ƒë∆∞·ª£c ch·ªçn t·ª´ h√¥m nay ƒë·∫øn 3 ng√†y sau)
function setDateRange() {
    const dateInput = document.getElementById('prediction-date');
    const today = new Date();
    const maxDate = new Date();
    maxDate.setDate(today.getDate() + 3);
    
    dateInput.min = today.toISOString().split('T')[0];
    dateInput.max = maxDate.toISOString().split('T')[0];
    dateInput.value = today.toISOString().split('T')[0];
}

// Ch·ªçn mi·ªÅn
function selectRegionPrediction(region) {
    currentRegion = region;
    
    // C·∫≠p nh·∫≠t UI tabs
    document.querySelectorAll('.region-tab').forEach(tab => {
        tab.classList.remove('active');
    });
    document.querySelector(`[data-region="${region}"]`).classList.add('active');
    
    updateProvinceList();
}

// Setup event listeners
function setupEventListeners() {
    // X·ª≠ l√Ω form submit
    const form = document.getElementById('prediction-form');
    form.addEventListener('submit', handlePredictionSubmit);
    
    // Hi·ªÉn th·ªã/·∫©n tr∆∞·ªùng ng√†y sinh khi ch·ªçn ph∆∞∆°ng ph√°p "S·ªë may m·∫Øn c√° nh√¢n"
    const methodSelect = document.getElementById('prediction-method');
    methodSelect.addEventListener('change', function() {
        const luckyGroup = document.getElementById('lucky-number-group');
        if (this.value === 'lucky') {
            luckyGroup.style.display = 'block';
        } else {
            luckyGroup.style.display = 'none';
        }
    });
}

// X·ª≠ l√Ω submit form d·ª± ƒëo√°n
async function handlePredictionSubmit(e) {
    e.preventDefault();
    
    const province = document.getElementById('prediction-province').value;
    const date = document.getElementById('prediction-date').value;
    const method = document.getElementById('prediction-method').value;
    const birthDate = document.getElementById('birth-date').value;
    
    if (!province || !date) {
        alert('Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin!');
        return;
    }
    
    // Hi·ªÉn th·ªã loading
    showLoading();
    
    // Gi·∫£ l·∫≠p th·ªùi gian x·ª≠ l√Ω (1.5 gi√¢y)
    await new Promise(resolve => setTimeout(resolve, 1500));
    
    // T·∫°o d·ª± ƒëo√°n
    const prediction = generatePrediction(province, date, method, birthDate);
    
    // ·∫®n loading
    hideLoading();
    
    // Hi·ªÉn th·ªã k·∫øt qu·∫£
    displayPrediction(prediction);
    
    // L∆∞u v√†o l·ªãch s·ª≠
    savePredictionToHistory(prediction);
}

// T·∫°o s·ªë d·ª± ƒëo√°n
function generatePrediction(province, date, method, birthDate) {
    const prediction = {
        province: province,
        date: date,
        method: method,
        timestamp: new Date().toISOString(),
        specialNumbers: [],
        firstNumbers: [],
        potentialNumbers: [],
        confidence: 0,
        analysis: []
    };
    
    // T·∫°o seed t·ª´ th√¥ng tin
    const seed = getSeed(province, date, method, birthDate);
    
    // T·∫°o s·ªë ƒë·∫∑c bi·ªát (3 b·ªô 6 s·ªë)
    for (let i = 0; i < 3; i++) {
        prediction.specialNumbers.push(generateSixDigitNumber(seed + i));
    }
    
    // T·∫°o s·ªë gi·∫£i nh·∫•t (3 b·ªô 6 s·ªë)
    for (let i = 3; i < 6; i++) {
        prediction.firstNumbers.push(generateSixDigitNumber(seed + i));
    }
    
    // T·∫°o s·ªë ti·ªÅm nƒÉng (10 s·ªë 2 ch·ªØ s·ªë)
    for (let i = 0; i < 10; i++) {
        prediction.potentialNumbers.push(generateTwoDigitNumber(seed + i + 10));
    }
    
    // T√≠nh ƒë·ªô tin c·∫≠y (60-85%)
    prediction.confidence = Math.floor(60 + Math.random() * 25);
    
    // T·∫°o ph√¢n t√≠ch
    prediction.analysis = generateAnalysis(method, prediction);
    
    return prediction;
}

// T·∫°o seed t·ª´ th√¥ng tin
function getSeed(province, date, method, birthDate) {
    let seed = 0;
    
    // Th√™m m√£ t·ª´ t·ªânh
    for (let i = 0; i < province.length; i++) {
        seed += province.charCodeAt(i);
    }
    
    // Th√™m m√£ t·ª´ ng√†y
    seed += new Date(date).getTime() % 10000;
    
    // Th√™m m√£ t·ª´ ph∆∞∆°ng ph√°p
    seed += method.length * 100;
    
    // N·∫øu c√≥ ng√†y sinh, th√™m v√†o
    if (birthDate) {
        seed += new Date(birthDate).getTime() % 10000;
    }
    
    return seed;
}

// T·∫°o s·ªë 6 ch·ªØ s·ªë
function generateSixDigitNumber(seed) {
    const random = seededRandom(seed);
    return String(Math.floor(random * 900000) + 100000);
}

// T·∫°o s·ªë 2 ch·ªØ s·ªë
function generateTwoDigitNumber(seed) {
    const random = seededRandom(seed);
    return String(Math.floor(random * 100)).padStart(2, '0');
}

// Random c√≥ seed (ƒë·ªÉ k·∫øt qu·∫£ nh·∫•t qu√°n)
function seededRandom(seed) {
    const x = Math.sin(seed) * 10000;
    return x - Math.floor(x);
}

// T·∫°o ph√¢n t√≠ch
function generateAnalysis(method, prediction) {
    const analyses = [];
    
    switch(method) {
        case 'ai':
            analyses.push('ü§ñ S·ª≠ d·ª•ng thu·∫≠t to√°n AI ƒë·ªÉ ph√¢n t√≠ch 100 k·ª≥ quay g·∫ßn nh·∫•t');
            analyses.push('üìä Nh·∫≠n di·ªán ƒë∆∞·ª£c 3 pattern ch√≠nh trong d·ªØ li·ªáu l·ªãch s·ª≠');
            analyses.push('üéØ C√°c s·ªë d·ª± ƒëo√°n c√≥ t·ª∑ l·ªá xu·∫•t hi·ªán cao trong 30 ng√†y qua');
            break;
        case 'frequency':
            analyses.push('üìà Ph√¢n t√≠ch t·∫ßn su·∫•t xu·∫•t hi·ªán c·ªßa c√°c con s·ªë trong 50 k·ª≥ g·∫ßn nh·∫•t');
            analyses.push('üî¢ C√°c s·ªë ch·∫µn c√≥ xu h∆∞·ªõng xu·∫•t hi·ªán nhi·ªÅu h∆°n (58%)');
            analyses.push('üí° T·ªï h·ª£p s·ªë ƒë∆∞·ª£c ch·ªçn d·ª±a tr√™n th·ªëng k√™ t·∫ßn su·∫•t cao nh·∫•t');
            break;
        case 'pattern':
            analyses.push('üß© Nh·∫≠n d·∫°ng m·∫´u s·ªë li√™n ti·∫øp v√† s·ªë c√°ch ƒë·ªÅu');
            analyses.push('üîÑ Ph√°t hi·ªán chu k·ª≥ l·∫∑p l·∫°i m·ªói 7-10 k·ª≥ quay');
            analyses.push('üé≤ D·ª± ƒëo√°n d·ª±a tr√™n pattern xu·∫•t hi·ªán trong 3 th√°ng qua');
            break;
        case 'lucky':
            analyses.push('üçÄ T√≠nh to√°n s·ªë may m·∫Øn d·ª±a tr√™n ng√†y sinh v√† phong th·ªßy');
            analyses.push('‚≠ê C√°c con s·ªë h·ª£p v·ªõi m·ªánh v√† tu·ªïi c·ªßa b·∫°n');
            analyses.push('üåü K·∫øt h·ª£p y·∫øu t·ªë phong th·ªßy ƒê√¥ng Ph∆∞∆°ng');
            break;
    }
    
    // Th√™m ph√¢n t√≠ch chung
    analyses.push(`‚ú® ƒê·ªô tin c·∫≠y: ${prediction.confidence}% - M·ª©c ƒë·ªô ${prediction.confidence > 75 ? 'Cao' : prediction.confidence > 65 ? 'Trung b√¨nh' : 'Kh·∫£ quan'}`);
    analyses.push('üí∞ Khuy·∫øn ngh·ªã: N√™n k·∫øt h·ª£p nhi·ªÅu b·ªô s·ªë ƒë·ªÉ tƒÉng c∆° h·ªôi tr√∫ng th∆∞·ªüng');
    
    return analyses;
}

// Hi·ªÉn th·ªã k·∫øt qu·∫£ d·ª± ƒëo√°n
function displayPrediction(prediction) {
    const resultDiv = document.getElementById('prediction-result');
    
    // Hi·ªÉn th·ªã s·ªë ƒë·∫∑c bi·ªát
    const specialDiv = document.getElementById('special-numbers');
    specialDiv.innerHTML = prediction.specialNumbers.map(num => 
        `<div class="predicted-number">${num}</div>`
    ).join('');
    
    // Hi·ªÉn th·ªã s·ªë gi·∫£i nh·∫•t
    const firstDiv = document.getElementById('first-numbers');
    firstDiv.innerHTML = prediction.firstNumbers.map(num => 
        `<div class="predicted-number">${num}</div>`
    ).join('');
    
    // Hi·ªÉn th·ªã s·ªë ti·ªÅm nƒÉng
    const potentialDiv = document.getElementById('potential-numbers');
    potentialDiv.innerHTML = prediction.potentialNumbers.map(num => 
        `<div class="predicted-number small">${num}</div>`
    ).join('');
    
    // Hi·ªÉn th·ªã ƒë·ªô tin c·∫≠y
    const confidenceBadge = document.getElementById('confidence-badge');
    confidenceBadge.textContent = `ƒê·ªô tin c·∫≠y: ${prediction.confidence}%`;
    
    // Hi·ªÉn th·ªã ph√¢n t√≠ch
    const analysisDiv = document.getElementById('analysis-content');
    analysisDiv.innerHTML = prediction.analysis.map(item => 
        `<div class="analysis-item">${item}</div>`
    ).join('');
    
    // Hi·ªÉn th·ªã k·∫øt qu·∫£
    resultDiv.style.display = 'block';
    
    // Scroll ƒë·∫øn k·∫øt qu·∫£
    resultDiv.scrollIntoView({ behavior: 'smooth', block: 'start' });
}

// L∆∞u d·ª± ƒëo√°n v√†o l·ªãch s·ª≠
function savePredictionToHistory(prediction) {
    predictionHistory.unshift({
        id: Date.now(),
        province: prediction.province,
        date: prediction.date,
        method: prediction.method,
        timestamp: prediction.timestamp,
        specialNumbers: prediction.specialNumbers,
        confidence: prediction.confidence
    });
    
    // Gi·ªõi h·∫°n 10 d·ª± ƒëo√°n g·∫ßn nh·∫•t
    if (predictionHistory.length > 10) {
        predictionHistory = predictionHistory.slice(0, 10);
    }
    
    // L∆∞u v√†o sessionStorage
    sessionStorage.setItem('predictionHistory', JSON.stringify(predictionHistory));
    
    // Hi·ªÉn th·ªã l·∫°i l·ªãch s·ª≠
    displayHistory();
}

// Hi·ªÉn th·ªã l·ªãch s·ª≠ d·ª± ƒëo√°n
function displayHistory() {
    const historyDiv = document.getElementById('history-list');
    
    if (predictionHistory.length === 0) {
        historyDiv.innerHTML = '<div class="empty-history">Ch∆∞a c√≥ l·ªãch s·ª≠ d·ª± ƒëo√°n n√†o</div>';
        return;
    }
    
    historyDiv.innerHTML = predictionHistory.map(item => {
        const methodName = getMethodName(item.method);
        const dateStr = new Date(item.date).toLocaleDateString('vi-VN');
        const timeStr = new Date(item.timestamp).toLocaleString('vi-VN');
        
        return `
            <div class="history-item" onclick="viewHistoryDetail(${item.id})">
                <div class="history-item-header">
                    <span class="history-item-date">üìÖ ${dateStr} - ${item.province}</span>
                    <span class="history-item-method">${methodName}</span>
                </div>
                <div class="history-item-numbers">
                    üéØ S·ªë d·ª± ƒëo√°n: ${item.specialNumbers.join(', ')}
                </div>
                <small style="color: #999; display: block; margin-top: 5px;">
                    ‚è∞ T·∫°o l√∫c: ${timeStr} | ƒê·ªô tin c·∫≠y: ${item.confidence}%
                </small>
            </div>
        `;
    }).join('');
}

// Xem chi ti·∫øt l·ªãch s·ª≠
function viewHistoryDetail(id) {
    const item = predictionHistory.find(h => h.id === id);
    if (!item) return;
    
    alert(`
Chi ti·∫øt d·ª± ƒëo√°n:
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üìç T·ªânh/Th√†nh: ${item.province}
üìÖ Ng√†y quay: ${new Date(item.date).toLocaleDateString('vi-VN')}
üé≤ Ph∆∞∆°ng ph√°p: ${getMethodName(item.method)}
üéØ S·ªë ƒë·∫∑c bi·ªát: ${item.specialNumbers.join(', ')}
‚ú® ƒê·ªô tin c·∫≠y: ${item.confidence}%
‚è∞ T·∫°o l√∫c: ${new Date(item.timestamp).toLocaleString('vi-VN')}
    `);
}

// L·∫•y t√™n ph∆∞∆°ng ph√°p
function getMethodName(method) {
    const names = {
        'ai': 'AI Ph√¢n T√≠ch',
        'frequency': 'Th·ªëng K√™ T·∫ßn Su·∫•t',
        'pattern': 'Nh·∫≠n D·∫°ng M·∫´u',
        'lucky': 'S·ªë May M·∫Øn'
    };
    return names[method] || method;
}

// L∆∞u d·ª± ƒëo√°n hi·ªán t·∫°i
function savePrediction() {
    const result = document.getElementById('prediction-result');
    if (result.style.display === 'none') {
        alert('Kh√¥ng c√≥ d·ª± ƒëo√°n n√†o ƒë·ªÉ l∆∞u!');
        return;
    }
    
    alert('‚úÖ ƒê√£ l∆∞u d·ª± ƒëo√°n v√†o l·ªãch s·ª≠!\n\nB·∫°n c√≥ th·ªÉ xem l·∫°i trong ph·∫ßn "L·ªãch S·ª≠ D·ª± ƒêo√°n" b√™n d∆∞·ªõi.');
}

// Chia s·∫ª d·ª± ƒëo√°n
function sharePrediction() {
    const result = document.getElementById('prediction-result');
    if (result.style.display === 'none') {
        alert('Kh√¥ng c√≥ d·ª± ƒëo√°n n√†o ƒë·ªÉ chia s·∫ª!');
        return;
    }
    
    const specialNumbers = Array.from(document.querySelectorAll('#special-numbers .predicted-number'))
        .map(el => el.textContent).join(', ');
    
    const shareText = `üéØ D·ª± ƒëo√°n x·ªï s·ªë may m·∫Øn!\n\nS·ªë ƒë·∫∑c bi·ªát: ${specialNumbers}\n\nCh√∫c b·∫°n may m·∫Øn! üçÄ`;
    
    // Copy v√†o clipboard
    navigator.clipboard.writeText(shareText).then(() => {
        alert('‚úÖ ƒê√£ copy d·ª± ƒëo√°n v√†o clipboard!\n\nB·∫°n c√≥ th·ªÉ d√°n v√† chia s·∫ª v·ªõi b·∫°n b√®.');
    }).catch(() => {
        // Fallback n·∫øu kh√¥ng support clipboard API
        const textarea = document.createElement('textarea');
        textarea.value = shareText;
        document.body.appendChild(textarea);
        textarea.select();
        document.execCommand('copy');
        document.body.removeChild(textarea);
        alert('‚úÖ ƒê√£ copy d·ª± ƒëo√°n v√†o clipboard!');
    });
}

// Reset form v√† k·∫øt qu·∫£
function resetPrediction() {
    document.getElementById('prediction-form').reset();
    document.getElementById('prediction-result').style.display = 'none';
    document.getElementById('lucky-number-group').style.display = 'none';
    setDateRange();
    
    window.scrollTo({ top: 0, behavior: 'smooth' });
}

// Hi·ªÉn th·ªã loading
function showLoading() {
    const loadingHTML = `
        <div class="loading-overlay" id="loading-overlay">
            <div class="loading-spinner"></div>
            <div class="loading-text">üîÆ ƒêang ph√¢n t√≠ch v√† d·ª± ƒëo√°n...</div>
        </div>
    `;
    document.body.insertAdjacentHTML('beforeend', loadingHTML);
}

// ·∫®n loading
function hideLoading() {
    const loading = document.getElementById('loading-overlay');
    if (loading) {
        loading.remove();
    }
}

// Load l·ªãch s·ª≠ khi trang load
function loadPredictionHistory() {
    const saved = sessionStorage.getItem('predictionHistory');
    if (saved) {
        predictionHistory = JSON.parse(saved);
        displayHistory();
    }
}

// Export c√°c h√†m c·∫ßn thi·∫øt ƒë·ªÉ g·ªçi t·ª´ HTML
window.selectRegionPrediction = selectRegionPrediction;
window.savePrediction = savePrediction;
window.sharePrediction = sharePrediction;
window.resetPrediction = resetPrediction;
window.viewHistoryDetail = viewHistoryDetail;